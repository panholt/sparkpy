{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"getLogger\tfunction"
			],
			[
				"attr",
				"attribute"
			],
			[
				"proper",
				"properties\tstatement"
			],
			[
				"__",
				"__getattribute__"
			],
			[
				"room",
				"room_id\tparam"
			],
			[
				"m",
				"message\tmodule"
			],
			[
				"Sp",
				"SparkContainer\tclass"
			],
			[
				"Spark",
				"SparkLicense\tclass"
			],
			[
				"SparkT",
				"SparkTeamMembership\tclass"
			],
			[
				"abstra",
				"abstractmethod\tfunction"
			],
			[
				"wi",
				"with_traceback\tfunction"
			],
			[
				"_fe",
				"_fetched_at"
			],
			[
				"_load",
				"_loaded\tstatement"
			],
			[
				"prp",
				"properties\tfunction"
			],
			[
				"load",
				"_load_from_id\tfunction"
			],
			[
				"set",
				"setattr\tfunction"
			],
			[
				"resp",
				"response"
			],
			[
				"start",
				"startswith\tfunction"
			],
			[
				"ab",
				"abstractmethod\tfunction"
			],
			[
				"abs",
				"abstractmethod\tfunction"
			],
			[
				"requests",
				"requests_toolbelt\tmodule"
			],
			[
				"__mak",
				"__make_key\tfunction"
			],
			[
				"__m",
				"__make_key\tfunction"
			],
			[
				"person",
				"person_id"
			],
			[
				"send",
				"send_message"
			],
			[
				"per",
				"person_email"
			],
			[
				"pers",
				"person_id"
			],
			[
				"bearer",
				"bearer_token"
			],
			[
				"sl",
				"sleep_time"
			],
			[
				"negati",
				"_negative"
			],
			[
				"item",
				"item\tstatement"
			],
			[
				"is",
				"is_api_id\tmodule"
			],
			[
				"int",
				"int_to_key\tfunction"
			],
			[
				"asser",
				"assertEqual\tfunction"
			],
			[
				"kass",
				"_klass"
			],
			[
				"imp",
				"importlib〔module〕"
			],
			[
				"AP",
				"API_PATH"
			],
			[
				"de",
				"deque〔module〕"
			],
			[
				"API",
				"API_BASE"
			],
			[
				"SP",
				"SPARK_URI_B64"
			],
			[
				"SPA",
				"SPARK_PATHS〔variable〕"
			],
			[
				"SPARK",
				"SPARK_API_BASE"
			],
			[
				"url",
				"urlparse〔module〕"
			],
			[
				"base",
				"base64〔module〕"
			],
			[
				"_id",
				"_id"
			],
			[
				"team",
				"teamId〔argument〕"
			],
			[
				"uuid",
				"uuid4"
			],
			[
				"on_p",
				"on_pong"
			],
			[
				"try",
				"try\tTry/Except"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import base64\nfrom urllib.parse import urlparse\nfrom uuid import UUID, uuid4\n\nspark_paths = ['messages',\n               'rooms',\n               'people',\n               'memberships',\n               'teams',\n               'team/memberships',\n               'webhook',\n               'organizations',\n               'licenses',\n               'roles']\n\nmagic_number = 'Y2lzY29zcGFyazovL'  # Magic number: b64.encode('ciscospark://')\n\n\n# ----------! Api helpers\ndef spark_path_map(key):\n    ''' Provide a two-way mapping for API paths to internal paths '''\n\n    path_map = {'messages': 'MESSAGE',\n                'rooms': 'ROOM',\n                'people': 'PEOPLE',\n                'memberships': 'MEMBERSHIP',\n                'teams': 'TEAM',\n                'team/memberships': '',\n                'webhook': '',\n                'organizations': '',\n                'licenses': '',\n                'roles': ''}\n    return\n\n# -------------! uuid helpers\ndef is_uuid(_id):\n    ''' Take a string, return True if its a valid uuid 4'''\n    try:\n        UUID(_id, version=4)\n        return True\n    except ValueError:\n        return False\n\n\ndef decode_api_id(_id):\n    if _id.startswith(magic_number):\n        __id = _id\n        # Avoid padding errors from base64\n        padding = len(_id) % 4\n        if padding:\n            _id += '=' * (4 - padding)\n        url = urlparse(base64.urlsafe_b64decode(_id)).decode()\n        uuid = url.path.split('/')[-1]\n        path = url.path.split('/')[1].lower()\n        return {'uuid': uuid,\n                'path': path.replace('_', '/') + 's',\n                'id': __id}\n    else:\n        raise ValueError('Invalid API ID')\n\n\ndef is_api_id(_id, path=''):\n    ''' TODO docs '''\n    try:\n        decode_api_id(_id)\n        return True\n    except ValueError:\n        return False\n\n\ndef api_id_to_uuid(_id):\n    ''' TODO docs '''\n    assert isinstance(_id, str)\n    assert _id.startswith(magic_number)\n\n    url = urlparse(base64.b64decode(_id))\n    return url.path.split('/')[-1]\n\n\ndef uuid_to_api_id(path, _id):\n    ''' TODO docs '''\n    # 'me' and 'consumer' are the only (known) non uuid values\n    assert is_uuid(_id) or _id == 'me' or _id == 'consumer'\n\n    region = 'us'  # Are there others??\n    url = f'ciscospark://{region}/{path.upper()}/{_id}'\n    url = base64.b64encode(url.encode('utf-8')).decode('utf-8')\n    return url.split('=')[0]\n\n\ndef uuid_v4_str():\n    ''' TODO docs '''\n    return str(uuid4())\n\n",
			"file": "sparkpy/utils.py",
			"file_size": 1961,
			"file_write_time": 131477564307932061,
			"settings":
			{
				"buffer_size": 2450,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sparkpy/spark.py",
			"settings":
			{
				"buffer_size": 7861,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\nfrom .base import SparkBase\nfrom .time import SparkTime\nfrom ..session import SparkSession\n\n\nclass SparkPerson(SparkBase):\n\n    API_BASE = 'https://api.ciscospark.com/v1/people/'\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, path='people', **kwargs)\n        self._email = None\n\n    @property\n    def email(self):\n        # Emails is returned as an array but will only ever have one entry\n        # For now anyway\n        if not self._email:\n            self._email = self.emails[0]\n        return self._email\n\n    @property\n    def properties(self):\n        return {'id': {'type': str,\n                       'optional': False,\n                       'mutable': False},\n                'emails': {'type': list,\n                           'optional': False,\n                           'mutable': False},\n                'displayName': {'type': str,\n                                'optional': False,\n                                'mutable': True},\n                'avatar': {'type': str,\n                           'optional': True,\n                           'mutable': True},\n                'orgId': {'type': str,\n                          'optional': False,\n                          'mutable': False},\n                'created': {'type': SparkTime,\n                            'optional': False,\n                            'mutable': False},\n                'type': {'type': str,\n                         'optional': False,\n                         'mutable': False},\n                'firstName': {'type': str,\n                              'optional': True,\n                              'mutable': True},\n                'lastName': {'type': str,\n                             'optional': True,\n                             'mutable': True},\n                'nickName': {'type': str,\n                             'optional': True,\n                             'mutable': True},\n                'lastActivity': {'type': SparkTime,\n                                 'optional': True,\n                                 'mutable': False},\n                'status': {'type': str,\n                           'optional': True,\n                           'mutable': False},\n                'licenses': {'type': str,\n                             'optional': True,\n                             'mutable': True},\n                'roles': {'type': str,\n                          'optional': True,\n                          'mutable': False},\n                'timezone': {'type': str,\n                             'optional': True,\n                             'mutable': False},\n                'invitePending': {'type': bool,\n                                  'optional': True,\n                                  'mutable': False},\n                'loginEnabled': {'type': bool,\n                                 'optional': True,\n                                 'mutable': False}}\n\n    def update(self,\n               emails=None,\n               displayName=None,\n               firstName=None,\n               lastName=None,\n               avatar=None,\n               orgId=None,\n               roles=None,\n               licenses=None):\n\n        updates = {k: v for k, v in locals().items() if k != 'self' and v}\n        with SparkSession() as s:\n            existing_data = s.get(self.url).json()\n            existing_data.update(updates)\n            s.put(self.url, json=existing_data)\n        return\n\n    # def __repr__(self):\n    #     return f\"SparkPerson('{self.id}')\"\n\n    # def __str__(self):\n    #     return f\"SparkPerson('{self.displayName}')\"\n",
			"file": "sparkpy/models/people.py",
			"file_size": 3695,
			"file_write_time": 131477564307900945,
			"settings":
			{
				"buffer_size": 3604,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sparkpy/session.py",
			"settings":
			{
				"buffer_size": 1714,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sparkpy/models/room.py",
			"settings":
			{
				"buffer_size": 5235,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sparkpy/models/container.py",
			"settings":
			{
				"buffer_size": 5668,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from ..session import SparkSession\n\n\nclass SparkFile(object):\n\n    def __init__(self, url):\n        self._url = url\n        self._filename = None\n\n    @property\n    def url(self):\n        return self._url\n\n    @property\n    def filename(self):\n        if not self._filename:\n            with SparkSession() as s:\n                resp = resp = s.head(self.url)\n                c_disp = resp.headers.get('Content-Disposition')\n                self._filename = c_disp.split('filename=')[1].replace('\"', '')\n            return self._filename\n\n    @filename.setter\n    def filename(self, val):\n        self._filename = val\n        return\n\n    def download(self, path='./'):\n        with SparkSession() as s:\n            with s.get(self.url, stream=True) as response:\n                if not self._filename:\n                    c_disp = response.headers.get('Content-Disposition')\n                    if c_disp:\n                        self.filename = c_disp.split('filename=')[1].replace('\"', '')\n                    with open(path + self.filename, 'wb') as f:\n                        for chunk in response.iter_content(chunk_size=1024):\n                            if chunk:\n                                f.write(chunk)\n\n    def __repr__(self):\n        return f'SparkFile({self.filename})'\n",
			"file": "sparkpy/models/file.py",
			"file_size": 1236,
			"file_write_time": 131477564307883049,
			"settings":
			{
				"buffer_size": 1287,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sparkpy/__init__.py",
			"settings":
			{
				"buffer_size": 965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "sparkpy/exceptions/spark_exceptions.py",
			"settings":
			{
				"buffer_size": 5471,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					""
				],
				[
					"Packages/MagicPython/settings/sublime/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/MagicPython/settings/sublime/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "ana lin",
		"selected_items":
		[
			[
				"ana lin",
				"Anaconda: Disable linting on this file"
			],
			[
				"sspy",
				"Set Syntax: MagicPython"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"anacon",
				"Anaconda: Show error list"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"anacon pyth",
				"Anaconda: McCabe complexity check"
			],
			[
				"anac",
				"Anaconda: Set Python interpreter"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"sspyh",
				"Set Syntax: Python3"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Discover Packages"
			],
			[
				"intel",
				"SublimeCodeIntel: Reset"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"ssp",
				"Set Syntax: MagicPython"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"ssj",
				"Set Syntax: JSON"
			],
			[
				"package con",
				"Package Control: Disable Package"
			],
			[
				"lint",
				"SublimeLinter: Lint This View"
			],
			[
				"magic",
				"Set Syntax: MagicPython"
			],
			[
				"package control dis",
				"Package Control: Disable Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 452.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"dir(sublime)",
			"globals()",
			"sublimecodeintel_dump_import_dirs",
			"SublimeLinter",
			"Sublim",
			"S",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/panholt/dev/bots/sparkpy",
		"/Users/panholt/dev/bots/sparkpy/sparkpy",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/exceptions",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models",
		"/Users/panholt/dev/bots/sparkpy/tests"
	],
	"file_history":
	[
		"/Users/panholt/dev/bots/sparkpy/sparkpy/session.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/base.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/container.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/room.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/spark.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/utils.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/message.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/team.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/file.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/__init__.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/license.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/_utils.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/webhook.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/__init__.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/organization.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/role.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/membership.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/time.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/utils/uuid.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/people.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/utils/time.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/models/new_base.py",
		"/Users/panholt/dev/bots/sparkpy/tests/test_session.py",
		"/Users/panholt/dev/bots/sparkpy/tests/test_room.py",
		"/Users/panholt/dev/bots/sparkpy/docs/source/session.rst",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/test_room.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/requirements.txt",
		"/Users/panholt/dev/bots/sparkpy/.env/bin/activate",
		"/Users/panholt/dev/bots/sparkpy/docs/source/models.rst",
		"/Users/panholt/dev/bots/sparkpy/docs/source/sparkpy.rst",
		"/Users/panholt/dev/bots/sparkpy/docs/source/container.rst",
		"/Users/panholt/dev/bots/sparkpy/docs/source/index.rst",
		"/Users/panholt/dev/bots/sparkpy/docs/source/intro.rst",
		"/Users/panholt/dev/bots/sparkpy/docs/source/conf.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/websocket.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/constants.py",
		"/Users/panholt/dev/bots/sparkpy/.env/lib/python3.6/site-packages/IPython/terminal/magics.py",
		"/Users/panholt/dev/bots/sparkpy/docs/build/html/index.html",
		"/Users/panholt/dev/bots/sparkpy/tests/test_container.py",
		"/Users/panholt/dev/bots/sparkpy/.docs/_build/genindex.html",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/exceptions/spark_exceptions.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/tests/test_session.py",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/User/Python3.sublime-settings",
		"/Users/panholt/dev/bots/sparkpy/sparkpy.sublime-project",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/Users/panholt/Dropbox/Sublime/User/sparkpy.sublime-build",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/User/SublimeCodeIntel.sublime-settings",
		"/Users/panholt/dev/bots/sparkpy/utils/uuid.py",
		"/Users/panholt/dev/bots/sparkpy/sparkpy/session/session.py",
		"/Users/panholt/dev/bots/sparkpy/constants.py",
		"/Users/panholt/dev/bots/sparkpy/session.py",
		"/Users/panholt/dev/bots/sparkpy/constants/__init__.py",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/Users/panholt/dev/bots/mercury/spark_websocket.py",
		"/Users/panholt/dev/err-backend-cisco-spark/plugin/cisco_spark_webhook.py",
		"/Users/panholt/dev/err-backend-cisco-spark/plugin/cisco_spark_webhook.plug",
		"/Users/panholt/dev/err-backend-cisco-spark/backend/cisco_spark.py",
		"/Users/panholt/Library/Application Support/Sublime Text 3/Packages/SublimeLinter/SublimeLinter.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/panholt/dev/bots/sparkpy/sparkpy"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"value",
			"API_BASE",
			"key",
			"log",
			" not key['optional",
			"typeerro",
			"TypeError",
			"load_",
			"none",
			"resp",
			"stream=True",
			"log",
			"SparkException",
			" '",
			"\\n",
			"resp",
			"\"\"\"",
			"send_file",
			"s.__send_file",
			"_Spark",
			"_Spark__send_file",
			"s.post('messages'",
			"print",
			".parent",
			"members",
			"self._uuid",
			"false",
			"self._uu",
			"self.id",
			"_id",
			"setter(key, data.get(key, False))",
			"super().__init__(path='rooms', **kwargs)",
			"with sp",
			"with SparkSession",
			"if self._id is None",
			"_send_message",
			"licenses",
			"s.send_message",
			"', ",
			",",
			"self._session",
			"organizations",
			"roles",
			"messages",
			"orgId",
			"SparkSesson",
			"**",
			"self.session",
			"self.se",
			"update",
			"SparkTime",
			"type",
			"rooms",
			"_load_from_id",
			"people",
			"status is read only",
			"_load_data",
			"_loaded",
			"loaded",
			"__set",
			"self._loaded",
			"getattr(self, name)",
			"_load_da",
			"value",
			"update",
			"setattr",
			"_load_data",
			"_loaded",
			" **",
			"_load_data",
			"self._loaded",
			"_load_from_id",
			"_load_data",
			"_loaded",
			"self._loaded",
			"   'optional': False,\n                               'mutable': False},",
			", '",
			"},",
			"return getattr",
			"return self.",
			"self._update",
			"with",
			"existing_data = self.get",
			"setattr",
			"displayName",
			"'time'",
			"_lastActivity",
			"'None",
			"=",
			"Message",
			"(, 'mutable': (?:False|True))",
			", 'mutable': False|True",
			"_load_from_id",
			"self._loaded",
			"type",
			"self.proper",
			"key",
			"self.properties",
			"bool",
			"bool, True, False},\n                 'loginEnabled': {'type': bool",
			"str, True",
			"str, False",
			")",
			", ",
			"', ",
			"('",
			".properties",
			"}')",
			"setattr",
			"getatt",
			"delete",
			"TODO Exceptions",
			"uuid",
			"args",
			"load_from",
			"self._load_da",
			"()\n",
			"self._load",
			"kwargs",
			"=None",
			"resp",
			"x",
			"uuid",
			"remove",
			"remove_per",
			"'panholt@gmail.com'",
			"email",
			"panholt@gmail.com"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "sparkpy/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2450,
						"regions":
						{
						},
						"selection":
						[
							[
								1618,
								1618
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "sparkpy/spark.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7861,
						"regions":
						{
						},
						"selection":
						[
							[
								674,
								674
							]
						],
						"settings":
						{
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 168.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "sparkpy/models/people.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3604,
						"regions":
						{
						},
						"selection":
						[
							[
								344,
								344
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 802.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "sparkpy/session.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1714,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 67.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "sparkpy/models/room.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5235,
						"regions":
						{
						},
						"selection":
						[
							[
								863,
								863
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1043.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "sparkpy/models/container.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5668,
						"regions":
						{
						},
						"selection":
						[
							[
								2355,
								2355
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 849.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "sparkpy/models/file.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1287,
						"regions":
						{
						},
						"selection":
						[
							[
								904,
								904
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "sparkpy/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 965,
						"regions":
						{
						},
						"selection":
						[
							[
								965,
								965
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "sparkpy/exceptions/spark_exceptions.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5471,
						"regions":
						{
						},
						"selection":
						[
							[
								800,
								800
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/sparkpy.sublime-build",
	"project": "sparkpy.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
